% BRAIN
  brainType = CGP                            #(string) brain to be used, [CGP]

% BRAIN_CGP
  MutationRate_CONST_value = 0.01            #(double) mutation rate const operator value (per op)
  MutationRate_DETGATE_logic = 0.01          #(double) mutation rate for operation inputs
  MutationRate_INPUTS = 0.01                 #(double) mutation rate for operation inputs (per input)
  MutationRate_OPERATION = 0.002             #(double) mutation rate (per gate) to change an operation (includes inputs)
  MutationRate_OUTPUT = 0.002                #(double) mutation rate (per output) to change where an output (or memory) is wired
  MutationRate_RNN_bias = 0.01               #(double) mutation rate (per RNN op) for RNN operator bias
  MutationRate_RNN_weights = 0.01            #(double) mutation rate (per weight) for RNN operator weights
  RNN_biasMaxValue = 1.0                     #(double) mutation rate for operation inputs
  RNN_biasMinValue = -1.0                    #(double) mutation rate for operation inputs
  availableOperators = all                   #(string) which opperators are allowed? all indicates, allow all opperators or, choose from:
                                             #    ADD (a+b), MULT (a*b), SUBTRACT (a-b), DIVIDE(a/b)
                                             #    SIN (sin(a)), COS (sin(a)), GREATER (1 if a > b, else 0), RAND (double[a..b))
                                             #    IF (b is a > 0, else 0), INV (-a), CONST (const)
                                             #    RNN (8 inputs sumed -> tanh) DETGATE (4 in, 1 out, logic lookup)
                                             #  if a list (| seperated) is provided, then each column has it's own availableOperators
  discretizeRecurrent = 0                    #(int) should recurrent nodes be discretized when being copied?
                                             #  if 0, no, leave them be.
                                             #  if 1 then map <= 0 to 0, and > 0 to 1
                                             #  if > then 1, values are mapped to new equally spaced values in range [discretizeRecurrentRange[0]..[1]] such that
                                             #  each bin has the same sized range
                                             #      i.e. if 3 and discretizeRecurrentRange = [-1,1], bin bounderies will be (-1.0,-.333-,.333-,1.0) and resulting
                                             #  values will be (-1.0,0.0,1.0)
                                             #  Note that this process ends up in a skewed mapping. mappings will always include -1.0 and 1.0. even values > 1 will
                                             #  result in remappings that do not have 0
  discretizeRecurrentRange = -1,1            #(string) value range for discretizeRecurrent if discretizeRecurrent > 1
  magnitudeMax = 100.0                       #(double) values generated which are larger then this will by clipped
  magnitudeMin = -100.0                      #(double) values generated which are smaller then this will by clipped
  nrRecurrentNodes = 3                       #(int) number of recurrent nodes
  opsMatixColumns = 4                        #(int) width of the operations matrtix
  opsMatixRows = 4                           #(int) height of the operations matrtix
  readFromOutputs = 1                        #(bool) if true, previous updates outputs will be available as inputs.

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointOffsetUniform = 1             #(bool) if true, offset will be from a uniform distribution, if false, from a normal distribution (where mean is 0
                                             #  and std_dev is mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

